import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:labbi_frontend/app/models/prometheus_endpoint.dart';
import 'package:labbi_frontend/app/providers.dart';
import 'package:labbi_frontend/app/Theme/app_colors.dart'; // Assuming custom colors

class EditPrometheusInfoPage extends ConsumerStatefulWidget {
  final PrometheusEndpoint endpoint;

  const EditPrometheusInfoPage({Key? key, required this.endpoint})
      : super(key: key);

  @override
  _EditPrometheusInfoPageState createState() => _EditPrometheusInfoPageState();
}

class _EditPrometheusInfoPageState extends ConsumerState<EditPrometheusInfoPage> {
  late TextEditingController _nameController;
  late TextEditingController _baseUrlController;
  late TextEditingController _pathController;
  late TextEditingController _queryController;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    // Initialize text controllers with the existing endpoint values
    _nameController = TextEditingController(text: widget.endpoint.name);
    _baseUrlController = TextEditingController(text: widget.endpoint.baseUrl);
    _pathController = TextEditingController(text: widget.endpoint.path);
    _queryController = TextEditingController(text: widget.endpoint.query);
  }

  @override
  void dispose() {
    _nameController.dispose();
    _baseUrlController.dispose();
    _pathController.dispose();
    _queryController.dispose();
    super.dispose();
  }

  Future<void> _updateEndpoint() async {
    setState(() {
      _isLoading = true; // Show loading state
    });

    try {
      // Create the updated PrometheusEndpoint object
      final updatedEndpoint = PrometheusEndpoint(
        id: widget.endpoint.id, // Keep the original ID
        name: _nameController.text.trim(),
        baseUrl: _baseUrlController.text.trim(),
        path: _pathController.text.trim(),
        query: _queryController.text.trim(),
      );

      // Call the API to update the endpoint
      await ref.read(prometheusControllerProvider.notifier).updateEndpoint(
            updatedEndpoint.id,
            updatedEndpoint.name,
            updatedEndpoint.baseUrl,
            updatedEndpoint.path,
            updatedEndpoint.query,
          );

      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Prometheus endpoint updated successfully!')),
      );

      Navigator.pop(context); // Return to the previous page
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to update endpoint: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false; // Hide loading state
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final prometheusState = ref.watch(prometheusControllerProvider);

    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back,
              color: Colors.white), // White back arrow
          onPressed: () {
            Navigator.pop(context); // Navigate back
          },
        ),
        title: const Text(
          'Edit Prometheus Endpoint',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        centerTitle: true,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [AppColors.primary, AppColors.secondary],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ),
      body: prometheusState.isLoading || _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Endpoint Name Field
                    TextField(
                      controller: _nameController,
                      decoration: InputDecoration(
                        labelText: 'Endpoint Name',
                        labelStyle: const TextStyle(color: AppColors.primary),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Base URL Field
                    TextField(
                      controller: _baseUrlController,
                      decoration: InputDecoration(
                        labelText: 'Base URL',
                        hintText: 'e.g., http://example.com',
                        labelStyle: const TextStyle(color: AppColors.primary),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Path Field
                    TextField(
                      controller: _pathController,
                      decoration: InputDecoration(
                        labelText: 'Path',
                        hintText: 'e.g., /api/v1',
                        labelStyle: const TextStyle(color: AppColors.primary),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),

                    // Query Field
                    TextField(
                      controller: _queryController,
                      decoration: InputDecoration(
                        labelText: 'Query',
                        hintText: 'e.g., ?query=up',
                        labelStyle: const TextStyle(color: AppColors.primary),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(color: AppColors.primary),
                        ),
                      ),
                    ),
                    const SizedBox(height: 32),

                    // Center the Update Button
                    Center(
                      child: ElevatedButton(
                        onPressed: _isLoading ? null : _updateEndpoint,
                        style: ElevatedButton.styleFrom(
                          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 32),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                          backgroundColor: AppColors.primary,
                        ),
                        child: _isLoading
                            ? const CircularProgressIndicator(
                                valueColor:
                                    AlwaysStoppedAnimation<Color>(Colors.white),
                              )
                            : const Text(
                                'Update Endpoint',
                                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color:Colors.white),
                              ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
    );
  }
}
